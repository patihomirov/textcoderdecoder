package main

import "testing"

func TestDecode(t *testing.T) {
	type args struct {
		in string
	}
	tests := []struct {
		name string
		args args
		want string
	}{
		{name: "test1", args: args{"[5 #][5 -_]-[5 #]"}, want: "#####-_-_-_-_-_-#####"},
		{name: "test2", args: args{"#"}, want: "#"},
		{name: "cats", args: args{`[22  ]/^--^\     /^--^\     /^--^\
[22  ]\[4 _]/     \[4 _]/     \[4 _]/
[21  ]/[6  ]\   /[6  ]\   /[6  ]\
[20  ]|[8  ]| |[8  ]| |[8  ]|
[21  ]\__  __/   \__  __/   \__  __/
[12 |^]\ \[3 ^|]^/ /[4 ^|]^\ \[12 ^|]
[12 | ]|\ \[2 | ]|/ /[5 | ]|\ \[11 | ]|
[12 | ]|/ /[2 | ]|\ \[5 | ]|/ /[11 | ]|
[12 | ]|\/[3  |] \/[5 | ]|\/[12  |]
[73 #]
[36 | ]|
[36 | ]|`}, want: `                      /^--^\     /^--^\     /^--^\
                      \____/     \____/     \____/
                     /      \   /      \   /      \
                    |        | |        | |        |
                     \__  __/   \__  __/   \__  __/
|^|^|^|^|^|^|^|^|^|^|^|^\ \^|^|^|^/ /^|^|^|^|^\ \^|^|^|^|^|^|^|^|^|^|^|^|
| | | | | | | | | | | | |\ \| | |/ /| | | | | |\ \| | | | | | | | | | | |
| | | | | | | | | | | | |/ /| | |\ \| | | | | |/ /| | | | | | | | | | | |
| | | | | | | | | | | | |\/ | | | \/| | | | | |\/ | | | | | | | | | | | |
#########################################################################
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |`},
		{name: "cats2", args: args{`[22  ]/^[2 -]^\[5  ]/^[2 -]^\[5  ]/^[2 -]^\
[22  ]\[4 _]/[5  ]\[4 _]/[5  ]\[4 _]/
[21  ]/[6  ]\[3  ]/[6  ]\[3  ]/[6  ]\
[20  ]|[8  ][2 | ][7  ][2 | ][7  ]|
[21  ]\[2 _][2  ][2 _]/[3  ]\[2 _][2  ][2 _]/[3  ]\[2 _][2  ][2 _]/
[12 |^]\ \[3 ^|]^/ /[4 ^|]^\ \[12 ^|]
[12 | ]|\ \[2 | ]|/ /[5 | ]|\ \[11 | ]|
[12 | ]|/ /[2 | ]|\ \[5 | ]|/ /[11 | ]|
[12 | ]|\/[3  |] \/[5 | ]|\/[12  |]
[73 #]
[36 | ]|
[36 | ]|`}, want: `                      /^--^\     /^--^\     /^--^\
                      \____/     \____/     \____/
                     /      \   /      \   /      \
                    |        | |        | |        |
                     \__  __/   \__  __/   \__  __/
|^|^|^|^|^|^|^|^|^|^|^|^\ \^|^|^|^/ /^|^|^|^|^\ \^|^|^|^|^|^|^|^|^|^|^|^|
| | | | | | | | | | | | |\ \| | |/ /| | | | | |\ \| | | | | | | | | | | |
| | | | | | | | | | | | |/ /| | |\ \| | | | | |/ /| | | | | | | | | | | |
| | | | | | | | | | | | |\/ | | | \/| | | | | |\/ | | | | | | | | | | | |
#########################################################################
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |`},
		{name: "kood", args: args{`[51 _]/[3 \][2 _]
 [2 _]/[3 \][44 _]\/[3 \][2 _]
  _\/[3 \][44 _]\/[3 \][2 _]
[3  ]_\/[8 \][8 _]/[5 \][8 _]/[5 \][11 _]\/[3 \][2 _]
[4  ]_\/[3 \][4 /][3 \][4 _]/[3 \][3 /][3 \][4 _]/[3 \][3 /][3 \][4 _]/[9 \][2 _]
[5  ]_\/[8 \]/[4 _]/[3 \][2 _]\[2 /][3 \][2 _]/[3 \][2 _]\[2 /][3 \][2 _]/[3 \][4 /][3 \][2 _]
[6  ]_\/[3 \][3 /][3 \][3 _]\[2 /][3 \][2 _]/[3 \][2 _]\[2 /][3 \][2 _]/[3 \][2 _]\/[3 \][2 _]\/[3 \][2 _]
[7  ]_\/[3 \]_\[3 /][3 \][2 _]\[3 /][5 \]/[4 _]\[3 /][5 \]/[3 _]\[2 /][7 \]/[2 \]_
[8  ]_\[3 /][4 _]\[3 /][5 _]\[5 /][8 _]\[5 /][6 _]\[7 /]\[2 /][2 _]`}, want: `___________________________________________________/\\\__
 __/\\\____________________________________________\/\\\__
  _\/\\\____________________________________________\/\\\__
   _\/\\\\\\\\________/\\\\\________/\\\\\___________\/\\\__
    _\/\\\////\\\____/\\\///\\\____/\\\///\\\____/\\\\\\\\\__
     _\/\\\\\\\\/____/\\\__\//\\\__/\\\__\//\\\__/\\\////\\\__
      _\/\\\///\\\___\//\\\__/\\\__\//\\\__/\\\__\/\\\__\/\\\__
       _\/\\\_\///\\\__\///\\\\\/____\///\\\\\/___\//\\\\\\\/\\_
        _\///____\///_____\/////________\/////______\///////\//__`},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := decode(tt.args.in); got != tt.want {
				t.Errorf("Decode() = \n%v, want \n%v", got, tt.want)
			}
		})
	}
}

//func Test_encode(t *testing.T) {
//	type args struct {
//		input string
//	}
//	tests := []struct {
//		name       string
//		args       args
//		wantOutput string
//	}{
//		{name: "test1", args: args{"-###=="}, wantOutput: "-[3 #][2 =]"},
//		{name: "test2", args: args{"--###="}, wantOutput: "[2 -][3 #]="},
//		{name: "test3", args: args{"--#=="}, wantOutput: "[2 -]#[2 =]"},
//		{name: "test3", args: args{"-#-#=="}, wantOutput: "[2 -#][2 =]"}, //Пока не работает
//	}
//	for _, tt := range tests {
//		t.Run(tt.name, func(t *testing.T) {
//			if gotOutput := encode(tt.args.input); gotOutput != tt.wantOutput {
//				t.Errorf("encode() = %v, want %v", gotOutput, tt.wantOutput)
//			}
//		})
//	}
//}

func Test_encodev3(t *testing.T) {
	type args struct {
		input string
	}
	tests := []struct {
		name       string
		args       args
		wantOutput string
	}{
		{name: "test11", args: args{"#"}, wantOutput: "#"},
		{name: "test11", args: args{"##"}, wantOutput: "[2 #]"},
		{name: "test12", args: args{"-#"}, wantOutput: "-#"},
		{name: "test12", args: args{"###+"}, wantOutput: "[3 #]+"},
		{name: "test12", args: args{"###"}, wantOutput: "[3 #]"},
		{name: "test12", args: args{"#-#"}, wantOutput: "#-#"},
		{name: "test12", args: args{"-##"}, wantOutput: "-[2 #]"},
		{name: "test12", args: args{"##-"}, wantOutput: "[2 #]-"},
		{name: "test0", args: args{"-##="}, wantOutput: "-[2 #]="},
		{name: "test1", args: args{"-###=="}, wantOutput: "-[3 #][2 =]"},
		{name: "test1", args: args{"-###==+++"}, wantOutput: "-[3 #][2 =][3 +]"},
		{name: "test2", args: args{"--###="}, wantOutput: "[2 -][3 #]="},
		{name: "test3", args: args{"--#=="}, wantOutput: "[2 -]#[2 =]"},
		{name: "test3", args: args{"########"}, wantOutput: "[8 #]"},
		{name: "test4", args: args{"-#-#=="}, wantOutput: "[2 -#][2 =]"},
		{name: "test4", args: args{"-#-#==___"}, wantOutput: "[2 -#][2 =][3 _]"},
		{name: "test5", args: args{"--_-_-_-_-_-#####"}, wantOutput: "[2 -][5 _-][5 #]"},
		{name: "test7", args: args{`                      /^--^\     /^--^\     /^--^\
                      \____/     \____/     \____/
                     /      \   /      \   /      \
                    |        | |        | |        |
                     \__  __/   \__  __/   \__  __/
|^|^|^|^|^|^|^|^|^|^|^|^\ \^|^|^|^/ /^|^|^|^|^\ \^|^|^|^|^|^|^|^|^|^|^|^|
| | | | | | | | | | | | |\ \| | |/ /| | | | | |\ \| | | | | | | | | | | |
| | | | | | | | | | | | |/ /| | |\ \| | | | | |/ /| | | | | | | | | | | |
| | | | | | | | | | | | |\/ | | | \/| | | | | |\/ | | | | | | | | | | | |
#########################################################################
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |`}, wantOutput: `[22  ]/^[2 -]^\[5  ]/^[2 -]^\[5  ]/^[2 -]^\
[22  ]\[4 _]/[5  ]\[4 _]/[5  ]\[4 _]/
[21  ]/[6  ]\[3  ]/[6  ]\[3  ]/[6  ]\
[20  ]|[8  ][2 | ][7  ][2 | ][7  ]|
[21  ]\[2 _][2  ][2 _]/[3  ]\[2 _][2  ][2 _]/[3  ]\[2 _][2  ][2 _]/
[12 |^]\ \[3 ^|]^/ /[4 ^|]^\ \[12 ^|]
[12 | ]|\ \[2 | ]|/ /[5 | ]|\ \[11 | ]|
[12 | ]|/ /[2 | ]|\ \[5 | ]|/ /[11 | ]|
[12 | ]|\/[3  |] \/[5 | ]|\/[12  |]
[73 #]
[36 | ]|
[36 | ]|`},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotOutput := encodev3(tt.args.input); gotOutput != tt.wantOutput {
				t.Errorf("encode(%v) = %v, want %v", tt.args.input, gotOutput, tt.wantOutput)
			}
		})
	}
}

func Test_encodev3decode(t *testing.T) {
	type args struct {
		input string
	}
	tests := []struct {
		name       string
		args       args
		wantOutput string
	}{
		{name: "test11", args: args{"#"}, wantOutput: "#"},
		{name: "test11", args: args{"##"}, wantOutput: "[2 #]"},
		{name: "test12", args: args{"-#"}, wantOutput: "-#"},
		{name: "test12", args: args{"###+"}, wantOutput: "[3 #]+"},
		{name: "test12", args: args{"###"}, wantOutput: "[3 #]"},
		{name: "test12", args: args{"#-#"}, wantOutput: "#-#"},
		{name: "test12", args: args{"-##"}, wantOutput: "-[2 #]"},
		{name: "test12", args: args{"##-"}, wantOutput: "[2 #]-"},
		{name: "test0", args: args{"-##="}, wantOutput: "-[2 #]="},
		{name: "test1", args: args{"-###=="}, wantOutput: "-[3 #][2 =]"},
		{name: "test1", args: args{"-###==+++"}, wantOutput: "-[3 #][2 =][3 +]"},
		{name: "test2", args: args{"--###="}, wantOutput: "[2 -][3 #]="},
		{name: "test3", args: args{"--#=="}, wantOutput: "[2 -]#[2 =]"},
		{name: "test3", args: args{"########"}, wantOutput: "[8 #]"},
		{name: "test4", args: args{"-#-#=="}, wantOutput: "[2 -#][2 =]"},
		{name: "test4", args: args{"-#-#==___"}, wantOutput: "[2 -#][2 =][3 _]"},
		{name: "test5", args: args{"--_-_-_-_-_-#####"}, wantOutput: "[2 -][5 _-][5 #]"},
		{name: "test7", args: args{`                      /^--^\     /^--^\     /^--^\
                      \____/     \____/     \____/
                     /      \   /      \   /      \
                    |        | |        | |        |
                     \__  __/   \__  __/   \__  __/
|^|^|^|^|^|^|^|^|^|^|^|^\ \^|^|^|^/ /^|^|^|^|^\ \^|^|^|^|^|^|^|^|^|^|^|^|
| | | | | | | | | | | | |\ \| | |/ /| | | | | |\ \| | | | | | | | | | | |
| | | | | | | | | | | | |/ /| | |\ \| | | | | |/ /| | | | | | | | | | | |
| | | | | | | | | | | | |\/ | | | \/| | | | | |\/ | | | | | | | | | | | |
#########################################################################
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |
| | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | | |`}, wantOutput: `[22  ]/^--^\     /^--^\     /^--^\
[22  ]\[4 _]/     \[4 _]/     \[4 _]/
[21  ]/[6  ]\   /[6  ]\   /[6  ]\
[20  ]|[8  ]| |[8  ]| |[8  ]|
[21  ]\__  __/   \__  __/   \__  __/
[12 |^]\ \[3 ^|]^/ /[4 ^|]^\ \[12 ^|]
[12 | ]|\ \[2 | ]|/ /[5 | ]|\ \[11 | ]|
[12 | ]|/ /[2 | ]|\ \[5 | ]|/ /[11 | ]|
[12 | ]|\/[3  |] \/[5 | ]|\/[12  |]
[73 #]
[36 | ]|
[36 | ]|`},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if gotOutput := decode(encodev3(tt.args.input)); gotOutput != tt.args.input {
				t.Errorf("decode(encode(%v)) = %v", tt.args.input, gotOutput)
			}
		})
	}
}
